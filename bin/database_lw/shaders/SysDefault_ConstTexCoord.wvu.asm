//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   row_major float4x4 g_MtxLightViewProjection;
//   row_major float3x4 g_MtxPalette[25];
//   row_major float4x4 g_MtxProjection;
//   row_major float4x4 g_MtxView;
//   row_major float4x4 g_MtxWorld;
//   bool mrgHasBone;
//   float4 mrgTexcoordOffset[2];
//
//
// Registers:
//
//   Name                     Reg   Size
//   ------------------------ ----- ----
//   mrgHasBone               b15      1
//   g_MtxLightViewProjection c24      4
//   g_MtxPalette             c28     75
//   mrgTexcoordOffset        c191     2
//   g_MtxProjection          c224     4
//   g_MtxView                c228     4
//   g_MtxWorld               c232     4
//

    vs_3_0
    def c0, 1, 3, 0, 0
    def c1, 0.5, -0.5, 0, 0
    dcl_position v0
    dcl_texcoord v1
    dcl_texcoord1 v2
    dcl_texcoord2 v3
    dcl_texcoord3 v4
    dcl_normal v5
    dcl_blendweight v6
    dcl_blendindices v7
    dcl_color v8
    dcl_position o0
    dcl_texcoord o1
    dcl_texcoord1 o2
    dcl_texcoord2 o3
    dcl_texcoord3 o4
    dcl_texcoord4 o5
    dcl_texcoord5 o6
    dcl_color o7
    add o1.zw, c191, v2.xyxy
    add o2.xy, c192, v3
    add o2.zw, c192, v4.xyxy
    mov o4.w, c0.z
    add o1.xy, c191, v1
    if b15
      add r0.x, c0.x, -v6.x
      add r0.x, r0.x, -v6.y
      add r0.x, r0.x, -v6.z
      mul r1, c0.y, v7
      mova a0, r1.yxzw
      mul r2, v6.y, c30[a0.x]
      mad r2, v6.x, c30[a0.y], r2
      mad r2, v6.z, c30[a0.z], r2
      mad r1, r0.x, c30[a0.w], r2
      dp3 r0.y, r1, v5
      mad r2, v0.xyzx, c0.xxxz, c0.zzzx
      dp4 r0.z, r1, r2
      mul r1, v6.y, c28[a0.x]
      mad r1, v6.x, c28[a0.y], r1
      mad r1, v6.z, c28[a0.z], r1
      mad r1, r0.x, c28[a0.w], r1
      dp4 r0.w, r1, r2
      dp3 r1.x, r1, v5
      mul r3, v6.y, c29[a0.x]
      mad r3, v6.x, c29[a0.y], r3
      mad r3, v6.z, c29[a0.z], r3
      mad r3, r0.x, c29[a0.w], r3
      dp4 r0.x, r3, r2
      dp3 r1.y, r3, v5
    else
      mov r1.xy, v5
      mov r0.y, v5.z
      mov r0.xzw, v0.yyzx
    endif
    mul r1.yzw, r1.y, c233.xxyz
    mad r1.xyz, r1.x, c232, r1.yzww
    mad r1.xyz, r0.y, c234, r1
    dp3 r0.y, r1, r1
    rsq r0.y, r0.y
    mul o4.xyz, r0.y, r1
    mul r1, r0.x, c233
    mad r1, r0.w, c232, r1
    mad r0, r0.z, c234, r1
    add r0, r0, c235
    mul r1, r0.y, c229
    mad r1, r0.x, c228, r1
    mad r1, r0.z, c230, r1
    mad r0, r0.w, c231, r1
    mul r1, r0.y, c225
    mad r1, r0.x, c224, r1
    mad r1, r0.z, c226, r1
    mad r0, r0.w, c227, r1
    mov o3, r0
    mov o0, r0
    mul r1, r0.y, c25
    mad r1, r0.x, c24, r1
    mad r0, r0.z, c26, r1
    add r0, r0, c27
    mul r1.xyz, r0.xyww, c1.xyxw
    add o5.xy, r1.z, r1
    mov o5.zw, r0
    mov o6, v0.z
    mov o7, v8

// approximately 66 instruction slots used
