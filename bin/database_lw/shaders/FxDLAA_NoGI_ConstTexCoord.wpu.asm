//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   bool g_IsPreserveHalf;
//   float4 g_ViewportSize;
//   sampler2D s0;
//
//
// Registers:
//
//   Name             Reg   Size
//   ---------------- ----- ----
//   g_IsPreserveHalf b8       1
//   g_ViewportSize   c24      1
//   s0               s0       1
//

    ps_3_0
    def c0, 0.5, -1.5, 0, 1.5
    def c1, 0.166666672, 0.333333343, 3, -0.100000001
    def c2, -1, 0, 1, 2
    def c3, 3.5, 0, 5.5, 0.125
    def c4, 0.25, -1, 0.119999997, -1.5
    def c5, 7.5, 0, -3.5, 4
    def c6, -5.5, 0, -7.5, 0
    dcl vPos.xy
    dcl_2d s0
    add r0, c0.x, vPos.xyxy
    mul r0, r0, c24.zwzw
    mov r1.zw, c24
    mad r2, r1.zwzw, c0.yzwz, r0.zwzw
    texld r3, r2, s0
    texld r2, r2.zwzw, s0
    mad r4, r1.zwzw, c3.xyzy, r0.zwzw
    texld r5, r4, s0
    add r5, r2.wxyz, r5.wxyz
    texld r4, r4.zwzw, s0
    add r4, r4.wxyz, r5
    mad r5, r1.zwzw, c5.xyzy, r0.zwzw
    texld r6, r5, s0
    add r4, r4, r6.wxyz
    add r4, r3.wxyz, r4
    texld r5, r5.zwzw, s0
    add r4, r4, r5.wxyz
    mad r5, r1.zwzw, c0.zyzw, r0.zwzw
    texld r6, r5, s0
    texld r5, r5.zwzw, s0
    mad r7, r1.zwzw, c3.yxyz, r0.zwzw
    texld r8, r7, s0
    add r8, r5.wxyz, r8.wxyz
    texld r7, r7.zwzw, s0
    add r7, r7.wxyz, r8
    mad r8, r1.zwzw, c5.yxyz, r0.zwzw
    texld r9, r8, s0
    add r7, r7, r9.wxyz
    add r7, r6.wxyz, r7
    texld r8, r8.zwzw, s0
    add r7, r7, r8.wxyz
    mad r8, r1.zwzw, c6.xyzy, r0.zwzw
    texld r9, r8, s0
    add r4, r4, r9.wxyz
    texld r8, r8.zwzw, s0
    add r4, r4, r8.wxyz
    mul r4.yzw, r4, c3.w
    dp3 r1.x, r4.yzww, c1.y
    mad r8, r1.zwzw, c6.yxyz, r0.zwzw
    texld r9, r8, s0
    add r7, r7, r9.wxyz
    texld r8, r8.zwzw, s0
    add r7, r7, r8.wxyz
    mul r4.yzw, r7, c3.w
    dp3 r1.y, r4.yzww, c1.y
    mad_sat r4.x, r4.x, c4.x, c4.y
    add r8, r5, r6
    texld r9, r0.zwzw, s0
    add r10, r9, r9
    mad r8, r8, c2.w, r10
    dp3 r4.y, r9, c1.y
    add r4.zw, r1.xyxy, -r4.y
    mul r5.xyz, r8, c1.x
    dp3 r5.x, r5, c1.y
    rcp r5.x, r5.x
    mad r11, r1.zwzw, c2.xyzy, r0.zwzw
    texld r12, r11.zwzw, s0
    dp3 r5.y, r12, c1.y
    add r5.y, r4.y, -r5.y
    rcp r5.y, r5.y
    mad_sat r13.y, r4.w, r5.y, c2.z
    texld r11, r11, s0
    add r6.xyz, r12, r11
    mad r6.xyz, r9, -c2.w, r6
    mul r6.xyz, r6_abs, c0.x
    dp3 r4.w, r6, c1.y
    mad r4.w, r4.w, c1.z, c1.w
    mul_sat r4.w, r5.x, r4.w
    add r14, r2, r3
    mad r10, r14, c2.w, r10
    mul r2.xyz, r10, c1.x
    dp3 r2.x, r2, c1.y
    mad r10, r10, c1.x, -r9
    rcp r2.x, r2.x
    mad r14, r1.zwzw, c2.yxyz, r0.zwzw
    texld r15, r14, s0
    texld r14, r14.zwzw, s0
    add r3.xyz, r14, r15
    mad r3.xyz, r9, -c2.w, r3
    mul r3.xyz, r3_abs, c0.x
    dp3 r2.y, r3, c1.y
    mad r2.y, r2.y, c1.z, c1.w
    mul_sat r2.x, r2.x, r2.y
    mad r10, r2.x, r10, r9
    mad r8, r8, c1.x, -r10
    mad r8, r4.w, r8, r10
    dp3 r2.x, r14, c1.y
    add r2.x, -r2.x, r4.y
    rcp r2.x, r2.x
    mad_sat r13.w, r4.z, r2.x, c2.z
    dp3 r2.x, r11, c1.y
    add r2.y, -r2.x, r4.y
    rcp r2.y, r2.y
    add r1.y, r1.y, -r2.x
    mul_sat r13.x, r2.y, r1.y
    dp3 r1.y, r15, c1.y
    add r2.x, -r1.y, r4.y
    rcp r2.x, r2.x
    add r1.x, -r1.y, r1.x
    mul_sat r13.z, r2.x, r1.x
    cmp r10, -r13, c2.z, r13
    lrp r13, r10.x, r9, r11
    lrp r11, r10.y, r13, r12
    lrp r12, r10.z, r9, r15
    lrp r13, r10.w, r12, r14
    mad_sat r1.x, r7.x, c4.x, c4.y
    lrp r7, r1.x, r11, r8
    lrp r10, r4.x, r13, r7
    cmp r1.y, -r4.x, c2.y, c2.z
    cmp r1.x, -r1.x, c2.y, c2.z
    add r1.x, r1.x, r1.y
    cmp r4, -r1.x, r8, r10
    if b8
      mad r7, r1.zwzw, c0.ywww, r0
      texld r8, r7, s0
      texld r7, r7.zwzw, s0
      mad r0, r1.zwzw, c0.yywy, r0.zwzw
      texld r1, r0, s0
      texld r0, r0.zwzw, s0
      add r0.x, r0.w, r1.w
      add r0.x, r8.w, r0.x
      add r0.x, r7.w, r0.x
      mad r0.x, r0.x, c5.w, r9.w
      add r0.x, r6.w, r0.x
      add r0.x, r5.w, r0.x
      add r0.x, r3.w, r0.x
      add r0.x, r2.w, r0.x
      mad_sat r0.x, r0.x, c4.z, c4.w
      add r1, -r4, r9
      mad oC0, r0.x, r1, r4
    else
      mov oC0, r4
    endif

// approximately 135 instruction slots used (25 texture, 110 arithmetic)
