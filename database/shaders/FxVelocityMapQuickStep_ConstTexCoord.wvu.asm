//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
// Parameters:
//
//   row_major float3x4 g_MtxPalette[25];
//   row_major float4x4 g_MtxPrevWorld;
//   row_major float4x4 g_MtxProjection;
//   row_major float4x4 g_MtxView;
//   row_major float4x4 g_MtxWorld;
//   float4 g_RightVec;
//   float4 g_StartPos;
//   bool mrgHasBone;
//
//
// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   mrgHasBone      b0       1
//   g_MtxProjection c0       4
//   g_MtxView       c4       4
//   g_MtxWorld      c8       4
//   g_MtxPrevWorld  c20      4
//   g_MtxPalette    c28     75
//   g_StartPos      c254     1
//   g_RightVec      c255     1
//

    vs_3_0
    def c12, 0, 0.5, -0.5, 0
    def c13, 3, 1, 0.00999999978, 0.400000006
    dcl_position v0
    dcl_normal v1
    dcl_blendweight v2
    dcl_blendindices v3
    dcl_position o0
    dcl_texcoord o1.xy
    if b0
      add r0.x, v2.y, v2.x
      add r0.x, r0.x, v2.z
      add r0.x, -r0.x, c13.y
      mul r1, c13.x, v3
      mova a0, r1.yxzw
      mul r2, v2.y, c30[a0.x]
      mad r2, c30[a0.y], v2.x, r2
      mad r2, c30[a0.z], v2.z, r2
      mad r1, c30[a0.w], r0.x, r2
      dp4 r2.z, r1, v0
      dp3 r0.y, r1, v1
      mul r1, v2.y, c28[a0.x]
      mad r1, c28[a0.y], v2.x, r1
      mad r1, c28[a0.z], v2.z, r1
      mad r1, c28[a0.w], r0.x, r1
      dp4 r2.x, r1, v0
      dp3 r0.z, r1, v1
      mul r1, v2.y, c29[a0.x]
      mad r1, c29[a0.y], v2.x, r1
      mad r1, c29[a0.z], v2.z, r1
      mad r1, c29[a0.w], r0.x, r1
      dp4 r2.y, r1, v0
      dp3 r0.x, r1, v1
      mov r2.w, v0.w
      mov r1, r2
      mov r0.w, v0.w
    else
      mov r1, v0
      mov r2.xyz, v0
      mov r0.w, v0.w
      mov r0.xyz, v1.yzxw
    endif
    mul r3, r2.y, c9
    mad r3, r2.x, c8, r3
    mad r2, r2.z, c10, r3
    mad r2, r0.w, c11, r2
    mov r3.x, c20.x
    mov r3.y, c21.x
    mov r3.z, c22.x
    mov r3.w, c254.x
    dp4 r3.x, r1, r3
    mov r4.x, c20.y
    mov r4.y, c21.y
    mov r4.z, c22.y
    mov r4.w, c254.y
    dp4 r3.y, r1, r4
    mov r4.x, c20.z
    mov r4.y, c21.z
    mov r4.z, c22.z
    mov r4.w, c254.z
    dp4 r3.z, r1, r4
    mov r4.x, c20.w
    mov r4.y, c21.w
    mov r4.z, c22.w
    mov r4.w, c23.w
    dp4 r0.w, r1, r4
    mul r1.xyz, r0.x, c9
    mad r1.xyz, r0.z, c8, r1
    mad r0.xyz, r0.y, c10, r1
    nrm r1.xyz, r0
    mad r0.xyz, r1, c13.z, r2
    mad r2.xyz, r1, c13.z, r3
    abs r3.xyz, c255
    lrp r4.xyz, r3, r2, r0
    mul r3, r0.y, c5
    mad r3, r0.x, c4, r3
    mad r3, r0.z, c6, r3
    mad r2, r2.w, c7, r3
    nrm r0.xyz, r2
    mad r0.xyz, r0, -c13.w, r2
    mul r1.yw, r1.y, c5.xxzy
    mad r1.xy, r1.x, c4, r1.ywzw
    mad r1.xy, r1.z, c6, r1
    mul r3, r4.y, c5
    mad r3, r4.x, c4, r3
    mad r3, r4.z, c6, r3
    mad r3, r0.w, c7, r3
    nrm r2.xyz, r3
    mad r2.xyz, r2, -c13.w, r3
    add r1.zw, r0.xyxy, -r2.xyxy
    mul r1.xy, r1, r1.zwzw
    add r0.w, r1.y, r1.x
    mul r1, r0.y, c1
    mad r1, r0.x, c0, r1
    mad r1, r0.z, c2, r1
    mad r1, r2.w, c3, r1
    mul r4, r2.y, c1
    mad r4, r2.x, c0, r4
    mad r2, r2.z, c2, r4
    mad r2, r3.w, c3, r2
    max r0.x, r0.w, -c13.y
    min r0.x, r0.x, c13.y
    sge r0.x, r0.x, c12.x
    add r3, r1, -r2
    mad o0, r0.x, r3, r2
    rcp r0.y, r1.w
    rcp r0.z, r2.w
    mul r0.zw, r0.z, r2.xyxy
    mad r0.yz, r1.xxyw, r0.y, -r0.xzww
    mad r0.xy, r0.x, -r0.yzzw, r0.yzzw
    mul o1.xy, r0, c12.yzzw

// approximately 110 instruction slots used
